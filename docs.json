{
	"id": 0,
	"name": "ts.data.json Documentation",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 154,
			"name": "FromDecoder",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "json-decoder.ts",
					"line": 4,
					"character": 12,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L4"
				}
			],
			"typeParameters": [
				{
					"id": 155,
					"name": "Decoder",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": 155,
					"name": "Decoder",
					"package": "ts.data.json",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": 70,
					"typeArguments": [
						{
							"type": "inferred",
							"name": "T"
						}
					],
					"name": "JsonDecoder.Decoder",
					"package": "ts.data.json"
				},
				"trueType": {
					"type": "reference",
					"target": {
						"sourceFileName": "src/json-decoder.ts",
						"qualifiedName": "T"
					},
					"name": "T",
					"package": "ts.data.json",
					"refersToTypeParameter": true
				},
				"falseType": {
					"type": "intrinsic",
					"name": "never"
				}
			}
		},
		{
			"id": 1,
			"name": "JsonDecoder",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "TypeScript type annotations provide compile-time guarantees. However, when data flows into our clients from external sources, many things can go wrong at runtime.\n\nJSON decoders validate our JSON before it enters our program. This way, if the data has an unexpected structure, we're immediately alerted."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\ntype User = {\n  firstname: string;\n  lastname: string;\n};\n\nconst userDecoder = JsonDecoder.object<User>(\n  {\n    firstname: JsonDecoder.string,\n    lastname: JsonDecoder.string\n  },\n  'User'\n);\n\nconst jsonObjectOk = {\n  firstname: 'Damien',\n  lastname: 'Jurado'\n};\n\nuserDecoder\n  .decodeToPromise(jsonObjectOk)\n  .then(user => {\n    console.log(`User ${user.firstname} ${user.lastname} decoded successfully`);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 70,
					"name": "Decoder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A decoder that can validate and transform JSON data into strongly typed TypeScript values."
							}
						]
					},
					"children": [
						{
							"id": 71,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 49,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L49"
								}
							],
							"signatures": [
								{
									"id": 72,
									"name": "new Decoder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 49,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L49"
										}
									],
									"typeParameter": [
										{
											"id": 73,
											"name": "a",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 74,
											"name": "decodeFn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 75,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 49,
															"character": 34,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L49"
														}
													],
													"signatures": [
														{
															"id": 76,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 49,
																	"character": 34,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L49"
																}
															],
															"parameters": [
																{
																	"id": 77,
																	"name": "json",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 188,
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 73,
																		"name": "a",
																		"package": "ts.data.json",
																		"qualifiedName": "JsonDecoder.Decoder.a",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Result",
																"package": "ts.data.json"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 73,
												"name": "a",
												"package": "ts.data.json",
												"qualifiedName": "JsonDecoder.Decoder.a",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							]
						},
						{
							"id": 82,
							"name": "decode",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 62,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L62"
								}
							],
							"signatures": [
								{
									"id": 83,
									"name": "decode",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Decodes a JSON object of type <a> and returns a Result<a>"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A Result containing either the decoded value or an error message"
													}
												]
											},
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nJsonDecoder.string.decode('hi'); // Ok<string>({value: 'hi'})\nJsonDecoder.string.decode(5); // Err({error: '5 is not a valid string'})\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 62,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L62"
										}
									],
									"parameters": [
										{
											"id": 84,
											"name": "json",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The JSON object to decode"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 188,
										"typeArguments": [
											{
												"type": "reference",
												"target": 73,
												"name": "a",
												"package": "ts.data.json",
												"qualifiedName": "JsonDecoder.Decoder.a",
												"refersToTypeParameter": true
											}
										],
										"name": "Result",
										"package": "ts.data.json"
									}
								}
							]
						},
						{
							"id": 85,
							"name": "~standard",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Standard Schema interface for this decoder."
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 69,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L69"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/standard-schema-v1.ts",
									"qualifiedName": "StandardSchemaV1.Props"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "reference",
										"target": 73,
										"name": "a",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder.a",
										"refersToTypeParameter": true
									}
								],
								"name": "Props",
								"package": "ts.data.json",
								"qualifiedName": "StandardSchemaV1.Props"
							},
							"defaultValue": "...",
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "StandardSchemaV1.~standard"
							}
						},
						{
							"id": 86,
							"name": "fold",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 99,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
								}
							],
							"signatures": [
								{
									"id": 87,
									"name": "fold",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Decodes a JSON object of type <a> and calls onOk() on success or onErr() on failure, both return <b>"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The result of either onOk or onErr"
													}
												]
											},
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nJsonDecoder.string.fold(\n  (value: string) => parseInt(value, 10),\n  (error: string) => 0,\n  '000000000001'\n); // 1\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 99,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
										}
									],
									"typeParameter": [
										{
											"id": 88,
											"name": "b",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 89,
											"name": "onOk",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "function called when the decoder succeeds"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 90,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 99,
															"character": 18,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
														}
													],
													"signatures": [
														{
															"id": 91,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 99,
																	"character": 18,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
																}
															],
															"parameters": [
																{
																	"id": 92,
																	"name": "result",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 73,
																		"name": "a",
																		"package": "ts.data.json",
																		"qualifiedName": "JsonDecoder.Decoder.a",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 88,
																"name": "b",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										},
										{
											"id": 93,
											"name": "onErr",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "function called when the decoder fails"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 94,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 99,
															"character": 43,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
														}
													],
													"signatures": [
														{
															"id": 95,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 99,
																	"character": 43,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L99"
																}
															],
															"parameters": [
																{
																	"id": 96,
																	"name": "error",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 88,
																"name": "b",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										},
										{
											"id": 97,
											"name": "json",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The JSON object to decode"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 88,
										"name": "b",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							]
						},
						{
							"id": 98,
							"name": "decodeToPromise",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 119,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L119"
								}
							],
							"signatures": [
								{
									"id": 99,
									"name": "decodeToPromise",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Decodes a JSON object of type <a> and returns a Promise<a>"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A Promise that resolves with the decoded value or rejects with an error message"
													}
												]
											},
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nJsonDecoder.string.decodeToPromise('hola').then(res => console.log(res)); // 'hola'\nJsonDecoder.string.decodeToPromise(2).catch(err => console.log(err)); // '2 is not a valid string'\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 119,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L119"
										}
									],
									"parameters": [
										{
											"id": 100,
											"name": "json",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The JSON object to decode"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 73,
												"name": "a",
												"package": "ts.data.json",
												"qualifiedName": "JsonDecoder.Decoder.a",
												"refersToTypeParameter": true
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 101,
							"name": "map",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 145,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L145"
								}
							],
							"signatures": [
								{
									"id": 102,
									"name": "map",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the decoder has succeeded, transforms the decoded value into something else"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A new decoder that applies the transformation"
													}
												]
											},
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\n// Decode a string, then transform it into a Date\nconst dateDecoder = JsonDecoder.string.map(stringDate => new Date(stringDate));\n// Ok scenario\ndateDecoder.decode('2018-12-21T18:22:25.490Z'); // Ok<Date>({value: Date(......)})\n// Err scenario\ndateDecoder.decode(false); // Err({error: 'false is not a valid string'})\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 145,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L145"
										}
									],
									"typeParameter": [
										{
											"id": 103,
											"name": "b",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 104,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The transformation function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 105,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 145,
															"character": 15,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L145"
														}
													],
													"signatures": [
														{
															"id": 106,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 145,
																	"character": 15,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L145"
																}
															],
															"parameters": [
																{
																	"id": 107,
																	"name": "value",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 73,
																		"name": "a",
																		"package": "ts.data.json",
																		"qualifiedName": "JsonDecoder.Decoder.a",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 103,
																"name": "b",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 103,
												"name": "b",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							]
						},
						{
							"id": 108,
							"name": "mapError",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 161,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L161"
								}
							],
							"signatures": [
								{
									"id": 109,
									"name": "mapError",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "TODO: Add documentation in the readme\nIf the decoder has failed, transforms the error into an Ok value"
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 161,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L161"
										}
									],
									"typeParameter": [
										{
											"id": 110,
											"name": "b",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 111,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The transformation function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 112,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 161,
															"character": 20,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L161"
														}
													],
													"signatures": [
														{
															"id": 113,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 161,
																	"character": 20,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L161"
																}
															],
															"parameters": [
																{
																	"id": 114,
																	"name": "error",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 110,
																"name": "b",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 73,
														"name": "a",
														"package": "ts.data.json",
														"qualifiedName": "JsonDecoder.Decoder.a",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 110,
														"name": "b",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							]
						},
						{
							"id": 115,
							"name": "chain",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 188,
									"character": 4,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L188"
								}
							],
							"signatures": [
								{
									"id": 116,
									"name": "chain",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Chain decoders that might fail"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A new decoder that chains the current decoder with the result of fn"
													}
												]
											},
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nconst adultDecoder = JsonDecoder.number.chain(age =>\n  age >= 18\n    ? JsonDecoder.succeed\n    : JsonDecoder.fail(`Age ${age} is less than 18`)\n);\nadultDecoder.decode(18); // Ok<number>({value: 18})\nadultDecoder.decode(17); // Err({error: 'Age 17 is less than 18'})\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "json-decoder.ts",
											"line": 188,
											"character": 4,
											"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L188"
										}
									],
									"typeParameter": [
										{
											"id": 117,
											"name": "b",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 118,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Function that returns a new decoder"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 119,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 188,
															"character": 17,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L188"
														}
													],
													"signatures": [
														{
															"id": 120,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "json-decoder.ts",
																	"line": 188,
																	"character": 17,
																	"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L188"
																}
															],
															"parameters": [
																{
																	"id": 121,
																	"name": "value",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 73,
																		"name": "a",
																		"package": "ts.data.json",
																		"qualifiedName": "JsonDecoder.Decoder.a",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": 70,
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 117,
																		"name": "b",
																		"package": "ts.data.json",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Decoder",
																"package": "ts.data.json",
																"qualifiedName": "JsonDecoder.Decoder"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 117,
												"name": "b",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								71
							]
						},
						{
							"title": "Properties",
							"children": [
								85
							]
						},
						{
							"title": "Methods",
							"children": [
								82,
								86,
								98,
								101,
								108,
								115
							]
						}
					],
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 48,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L48"
						}
					],
					"typeParameters": [
						{
							"id": 122,
							"name": "a",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type that this decoder will produce when successful"
									}
								]
							}
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "src/standard-schema-v1.ts",
								"qualifiedName": "StandardSchemaV1"
							},
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "unknown"
								},
								{
									"type": "reference",
									"target": 73,
									"name": "a",
									"package": "ts.data.json",
									"qualifiedName": "JsonDecoder.Decoder.a",
									"refersToTypeParameter": true
								}
							],
							"name": "StandardSchemaV1",
							"package": "ts.data.json"
						}
					]
				},
				{
					"id": 2,
					"name": "lazy",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 224,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L224"
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "lazy",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for recursive data structures."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that can handle recursive data structures"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface Tree {\n  value: number;\n  children?: Tree[];\n}\n\nconst treeDecoder = JsonDecoder.lazy(() =>\n  JsonDecoder.object<Tree>(\n    {\n      value: JsonDecoder.number,\n      children: JsonDecoder.optional(JsonDecoder.array(treeDecoder))\n    },\n    'Tree'\n  )\n);\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 224,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L224"
								}
							],
							"typeParameter": [
								{
									"id": 4,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 5,
									"name": "mkDecoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns a decoder"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "json-decoder.ts",
													"line": 224,
													"character": 37,
													"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L224"
												}
											],
											"signatures": [
												{
													"id": 7,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 224,
															"character": 37,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L224"
														}
													],
													"type": {
														"type": "reference",
														"target": 70,
														"typeArguments": [
															{
																"type": "reference",
																"target": 4,
																"name": "a",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														],
														"name": "Decoder",
														"package": "ts.data.json",
														"qualifiedName": "JsonDecoder.Decoder"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 4,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 123,
					"name": "string",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decoder for "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " values."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A decoder that validates and returns string values"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nJsonDecoder.string.decode('hi'); // Ok<string>({value: 'hi'})\nJsonDecoder.string.decode(5); // Err({error: '5 is not a valid string'})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 239,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L239"
						}
					],
					"type": {
						"type": "reference",
						"target": 70,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Decoder",
						"package": "ts.data.json",
						"qualifiedName": "JsonDecoder.Decoder"
					},
					"defaultValue": "..."
				},
				{
					"id": 124,
					"name": "number",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decoder for "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " values."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A decoder that validates and returns number values"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nJsonDecoder.number.decode(99); // Ok<number>({value: 99})\nJsonDecoder.number.decode('hola'); // Err({error: 'hola is not a valid number'})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 258,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L258"
						}
					],
					"type": {
						"type": "reference",
						"target": 70,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "number"
							}
						],
						"name": "Decoder",
						"package": "ts.data.json",
						"qualifiedName": "JsonDecoder.Decoder"
					},
					"defaultValue": "..."
				},
				{
					"id": 125,
					"name": "boolean",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decoder for "
							},
							{
								"kind": "code",
								"text": "`boolean`"
							},
							{
								"kind": "text",
								"text": " values."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A decoder that validates and returns boolean values"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nJsonDecoder.boolean.decode(true); // Ok<boolean>({value: true})\nJsonDecoder.boolean.decode('true'); // Err({error: 'true is not a valid boolean'})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 277,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L277"
						}
					],
					"type": {
						"type": "reference",
						"target": 70,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						],
						"name": "Decoder",
						"package": "ts.data.json",
						"qualifiedName": "JsonDecoder.Decoder"
					},
					"defaultValue": "..."
				},
				{
					"id": 126,
					"name": "emptyObject",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decoder for an empty object ({})."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A decoder that validates and returns empty objects"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nJsonDecoder.emptyObject.decode({}); // Ok<EmptyObject>({value: {}})\nJsonDecoder.emptyObject.decode({a: 1}); // Err({error: '{a: 1} is not a valid empty object'})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 297,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L297"
						}
					],
					"type": {
						"type": "reference",
						"target": 70,
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/json-decoder.ts",
									"qualifiedName": "EmptyObject"
								},
								"name": "EmptyObject",
								"package": "ts.data.json"
							}
						],
						"name": "Decoder",
						"package": "ts.data.json",
						"qualifiedName": "JsonDecoder.Decoder"
					},
					"defaultValue": "..."
				},
				{
					"id": 8,
					"name": "enumeration",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 332,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L332"
						}
					],
					"signatures": [
						{
							"id": 9,
							"name": "enumeration",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for "
									},
									{
										"kind": "code",
										"text": "`enumeration`"
									},
									{
										"kind": "text",
										"text": " values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns enum values"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nenum Color {\n  Red = 'red',\n  Blue = 'blue'\n}\n\nconst colorDecoder = JsonDecoder.enumeration(Color, 'Color');\ncolorDecoder.decode('red'); // Ok<Color>({value: Color.Red})\ncolorDecoder.decode('green'); // Err({error: '<Color> decoder failed at value \"green\" which is not in the enum'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 332,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L332"
								}
							],
							"typeParameter": [
								{
									"id": 10,
									"name": "e",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 11,
									"name": "enumObj",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The enum object to use for decoding. Must not be a const enum."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 12,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 10,
										"name": "e",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 127,
					"name": "DecoderObject",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 345,
							"character": 14,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L345"
						}
					],
					"typeParameters": [
						{
							"id": 128,
							"name": "a",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "p",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Required"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 128,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Required",
								"package": "typescript"
							}
						},
						"templateType": {
							"type": "reference",
							"target": 70,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/json-decoder.ts",
											"qualifiedName": "p"
										},
										"name": "p",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									},
									"objectType": {
										"type": "reference",
										"target": 128,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							],
							"name": "Decoder",
							"package": "ts.data.json",
							"qualifiedName": "JsonDecoder.Decoder"
						}
					}
				},
				{
					"id": 129,
					"name": "DecoderObjectKeyMap",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 346,
							"character": 14,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L346"
						}
					],
					"typeParameters": [
						{
							"id": 130,
							"name": "a",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "p",
						"parameterType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"target": 130,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						},
						"templateType": {
							"type": "intrinsic",
							"name": "string"
						},
						"optionalModifier": "+"
					}
				},
				{
					"id": 13,
					"name": "object",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 387,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L387"
						}
					],
					"signatures": [
						{
							"id": 14,
							"name": "object",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for objects with specified field decoders."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns objects matching the specified structure"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\nconst userDecoder = JsonDecoder.object<User>(\n  {\n    firstName: JsonDecoder.string,\n    lastName: JsonDecoder.string,\n    age: JsonDecoder.number\n  },\n  'User',\n  {\n    firstName: 'first_name',\n    lastName: 'last_name'\n  }\n);\n\nconst json = {\n  first_name: 'John',\n  last_name: 'Doe',\n  age: 30\n};\n\nuserDecoder.decode(json); // Ok<User>({value: {firstName: 'John', lastName: 'Doe', age: 30}})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 387,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L387"
								}
							],
							"typeParameter": [
								{
									"id": 15,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 16,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Key/value pairs of decoders for each object field."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 127,
										"typeArguments": [
											{
												"type": "reference",
												"target": 15,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "DecoderObject",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.DecoderObject"
									}
								},
								{
									"id": 17,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 18,
									"name": "keyMap",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optional map between json field names and user land field names.\n              Useful when the client model does not match with what the server sends."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 129,
										"typeArguments": [
											{
												"type": "reference",
												"target": 15,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "DecoderObjectKeyMap",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.DecoderObjectKeyMap"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 15,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 19,
					"name": "objectStrict",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 457,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L457"
						}
					],
					"signatures": [
						{
							"id": 20,
							"name": "objectStrict",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for objects with specified field decoders that fails if unknown fields are present."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns objects matching the specified structure, failing if unknown fields are present"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst userDecoder = JsonDecoder.objectStrict<User>(\n  {\n    name: JsonDecoder.string,\n    age: JsonDecoder.number\n  },\n  'User'\n);\n\nuserDecoder.decode({name: 'John', age: 30}); // Ok<User>\nuserDecoder.decode({name: 'John', age: 30, extra: 'field'}); // Err({error: 'Unknown key \"extra\" found while processing strict <User> decoder'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 457,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L457"
								}
							],
							"typeParameter": [
								{
									"id": 21,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 22,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Key/value pairs of decoders for each object field."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 127,
										"typeArguments": [
											{
												"type": "reference",
												"target": 21,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "DecoderObject",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.DecoderObject"
									}
								},
								{
									"id": 23,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 21,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "succeed",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decoder that always succeeds with the given value."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A decoder that always succeeds"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst succeedDecoder = JsonDecoder.succeed;\nsucceedDecoder.decode('anything'); // Ok<any>({value: 'anything'})\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 501,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L501"
						}
					],
					"type": {
						"type": "reference",
						"target": 70,
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Decoder",
						"package": "ts.data.json",
						"qualifiedName": "JsonDecoder.Decoder"
					},
					"defaultValue": "..."
				},
				{
					"id": 24,
					"name": "fail",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 517,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L517"
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "fail",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that always fails with the given error message."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that always fails with the specified error"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst failDecoder = JsonDecoder.fail<string>('This decoder always fails');\nfailDecoder.decode('anything'); // Err({error: 'This decoder always fails'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 517,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L517"
								}
							],
							"typeParameter": [
								{
									"id": 26,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 27,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The error message to return"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 26,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 28,
					"name": "failover",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 537,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L537"
						}
					],
					"signatures": [
						{
							"id": 29,
							"name": "failover",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that falls back to a default value if the given decoder fails."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that returns the default value if the given decoder fails"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst numberOrZero = JsonDecoder.failover(0, JsonDecoder.number);\nnumberOrZero.decode(42); // Ok<number>({value: 42})\nnumberOrZero.decode('not a number'); // Ok<number>({value: 0})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 537,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L537"
								}
							],
							"typeParameter": [
								{
									"id": 30,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 31,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value to return if the decoder fails"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 30,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 32,
									"name": "decoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decoder to try first"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 30,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 30,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "optional",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 576,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L576"
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "optional",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that makes a field optional."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that accepts either the decoded value or undefined"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  name: string;\n  age?: number;\n}\n\nconst userDecoder = JsonDecoder.object<User>(\n  {\n    name: JsonDecoder.string,\n    age: JsonDecoder.optional(JsonDecoder.number)\n  },\n  'User'\n);\n\nuserDecoder.decode({name: 'John'}); // Ok<User>\nuserDecoder.decode({name: 'John', age: 30}); // Ok<User>\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 576,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L576"
								}
							],
							"typeParameter": [
								{
									"id": 35,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 36,
									"name": "decoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decoder for the field when it is present"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 35,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 35,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 37,
					"name": "nullable",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 613,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L613"
						}
					],
					"signatures": [
						{
							"id": 38,
							"name": "nullable",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that accepts null values."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that accepts either the decoded value or null"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  name: string;\n  age: number | null;\n}\n\nconst userDecoder = JsonDecoder.object<User>(\n  {\n    name: JsonDecoder.string,\n    age: JsonDecoder.nullable(JsonDecoder.number)\n  },\n  'User'\n);\n\nuserDecoder.decode({name: 'John', age: null}); // Ok<User>\nuserDecoder.decode({name: 'John', age: 30}); // Ok<User>\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 613,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L613"
								}
							],
							"typeParameter": [
								{
									"id": 39,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 40,
									"name": "decoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decoder for the non-null value"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 39,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 39,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 41,
					"name": "oneOf",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 641,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L641"
						}
					],
					"signatures": [
						{
							"id": 42,
							"name": "oneOf",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that tries multiple decoders in sequence until one succeeds."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that tries each decoder in sequence until one succeeds"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst stringOrNumber = JsonDecoder.oneOf<string | number>(\n  [JsonDecoder.string, JsonDecoder.number],\n  'StringOrNumber'\n);\n\nstringOrNumber.decode('hello'); // Ok<string>({value: 'hello'})\nstringOrNumber.decode(42); // Ok<number>({value: 42})\nstringOrNumber.decode(true); // Err({error: '<StringOrNumber> decoder failed because true is not a valid value'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 641,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L641"
								}
							],
							"typeParameter": [
								{
									"id": 43,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 44,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Array of decoders to try in sequence"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 70,
											"typeArguments": [
												{
													"type": "reference",
													"target": 43,
													"name": "a",
													"package": "ts.data.json",
													"refersToTypeParameter": true
												}
											],
											"name": "Decoder",
											"package": "ts.data.json",
											"qualifiedName": "JsonDecoder.Decoder"
										}
									}
								},
								{
									"id": 45,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 43,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 46,
					"name": "allOf",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 679,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L679"
						}
					],
					"signatures": [
						{
							"id": 47,
							"name": "allOf",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that combines multiple decoders into a single decoder."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that combines the results of multiple decoders"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\nconst userDecoder = JsonDecoder.combine(\n  JsonDecoder.object({name: JsonDecoder.string}, 'User'),\n  JsonDecoder.object({age: JsonDecoder.number}, 'User'),\n  JsonDecoder.object({email: JsonDecoder.string}, 'User')\n);\n\nuserDecoder.decode({name: 'John', age: 30, email: 'john@example.com'}); // Ok<User>\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 679,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L679"
								}
							],
							"typeParameter": [
								{
									"id": 48,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 70,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "unknown"
												}
											],
											"name": "Decoder",
											"package": "ts.data.json",
											"qualifiedName": "JsonDecoder.Decoder"
										}
									}
								},
								{
									"id": 49,
									"name": "R",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 50,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Array of decoders to combine"
											}
										]
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"target": 48,
														"name": "T",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												}
											},
											{
												"type": "reference",
												"target": 70,
												"typeArguments": [
													{
														"type": "reference",
														"target": 49,
														"name": "R",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												],
												"name": "Decoder",
												"package": "ts.data.json",
												"qualifiedName": "JsonDecoder.Decoder"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 49,
										"name": "R",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 132,
					"name": "dictionary",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 706,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L706"
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "dictionary",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for dictionary/record types with string keys."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns a dictionary with string keys"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst numberDict = JsonDecoder.dictionary(JsonDecoder.number, 'NumberDict');\n\nnumberDict.decode({a: 1, b: 2}); // Ok<Record<string, number>>\nnumberDict.decode({a: '1', b: 2}); // Err({error: '<NumberDict> dictionary decoder failed at key \"a\" with error: \"1\" is not a valid number'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 706,
									"character": 28,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L706"
								}
							],
							"typeParameter": [
								{
									"id": 134,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 135,
									"name": "decoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decoder for the dictionary values"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 134,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								},
								{
									"id": 136,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 137,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "json-decoder.ts",
													"line": 709,
													"character": 13,
													"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L709"
												}
											],
											"indexSignature": {
												"id": 138,
												"name": "__index",
												"variant": "signature",
												"kind": 8192,
												"flags": {},
												"sources": [
													{
														"fileName": "json-decoder.ts",
														"line": 709,
														"character": 15,
														"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L709"
													}
												],
												"parameters": [
													{
														"id": 139,
														"name": "name",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"target": 134,
													"name": "a",
													"package": "ts.data.json",
													"refersToTypeParameter": true
												}
											}
										}
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 140,
					"name": "array",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 753,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L753"
						}
					],
					"signatures": [
						{
							"id": 141,
							"name": "array",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for arrays."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns arrays"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst numberArray = JsonDecoder.array(JsonDecoder.number, 'NumberArray');\n\nnumberArray.decode([1, 2, 3]); // Ok<number[]>\nnumberArray.decode([1, '2', 3]); // Err({error: '<NumberArray> decoder failed at index \"1\" with error: \"2\" is not a valid number'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 753,
									"character": 23,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L753"
								}
							],
							"typeParameter": [
								{
									"id": 142,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 143,
									"name": "decoder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The decoder for array elements"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"typeArguments": [
											{
												"type": "reference",
												"target": 142,
												"name": "a",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Decoder",
										"package": "ts.data.json",
										"qualifiedName": "JsonDecoder.Decoder"
									}
								},
								{
									"id": 144,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 142,
											"name": "a",
											"package": "ts.data.json",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 145,
					"name": "tuple",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 799,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L799"
						}
					],
					"signatures": [
						{
							"id": 146,
							"name": "tuple",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder for tuples with fixed length and types."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that validates and returns tuples"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst pointDecoder = JsonDecoder.tuple(\n  [JsonDecoder.number, JsonDecoder.number],\n  'Point'\n);\n\npointDecoder.decode([1, 2]); // Ok<[number, number]>\npointDecoder.decode([1, 2, 3]); // Err({error: '<Point> tuple decoder failed because it received a tuple of length 3 but expected 2'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 799,
									"character": 23,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L799"
								}
							],
							"typeParameter": [
								{
									"id": 147,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "tuple"
												}
											},
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"target": 70,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															}
														],
														"name": "Decoder",
														"package": "ts.data.json",
														"qualifiedName": "JsonDecoder.Decoder"
													}
												}
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 148,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Array of decoders for each tuple element"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 147,
										"name": "T",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 149,
									"name": "decoderName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How to display the name of the object being decoded in errors"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/json-decoder.ts",
											"qualifiedName": "TupleOfResults"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 147,
												"name": "T",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "TupleOfResults",
										"package": "ts.data.json"
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 51,
					"name": "isNull",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 849,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L849"
						}
					],
					"signatures": [
						{
							"id": 52,
							"name": "isNull",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that accepts null values and returns a default value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that accepts null and returns the default value"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst numberOrZero = JsonDecoder.isNull(0);\n\nnumberOrZero.decode(null); // Ok<number>({value: 0})\nnumberOrZero.decode(42); // Err({error: '42 is not null'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 849,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L849"
								}
							],
							"typeParameter": [
								{
									"id": 53,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 54,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value to return when null is encountered"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 53,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 53,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 55,
					"name": "isUndefined",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 873,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L873"
						}
					],
					"signatures": [
						{
							"id": 56,
							"name": "isUndefined",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that accepts undefined values and returns a default value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that accepts undefined and returns the default value"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst numberOrZero = JsonDecoder.isUndefined(0);\n\nnumberOrZero.decode(undefined); // Ok<number>({value: 0})\nnumberOrZero.decode(42); // Err({error: '42 is not undefined'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 873,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L873"
								}
							],
							"typeParameter": [
								{
									"id": 57,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 58,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value to return when undefined is encountered"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 57,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 57,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "constant",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 897,
							"character": 15,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L897"
						}
					],
					"signatures": [
						{
							"id": 151,
							"name": "constant",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that only accepts a specific constant value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that only accepts the specified value"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst trueDecoder = JsonDecoder.constant(true);\n\ntrueDecoder.decode(true); // Ok<boolean>({value: true})\ntrueDecoder.decode(false); // Err({error: 'false is not exactly true'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 897,
									"character": 26,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L897"
								}
							],
							"typeParameter": [
								{
									"id": 152,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 153,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The constant value to accept"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 152,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 152,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 59,
					"name": "isExactly",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 915,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L915"
						}
					],
					"signatures": [
						{
							"id": 60,
							"name": "isExactly",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decoder that only accepts a specific value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that only accepts the specified value"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst oneDecoder = JsonDecoder.isExactly(1);\n\noneDecoder.decode(1); // Ok<number>({value: 1})\noneDecoder.decode(2); // Err({error: '2 is not exactly 1'})\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 915,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L915"
								}
							],
							"typeParameter": [
								{
									"id": 61,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 62,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The exact value to accept"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 61,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": 61,
										"name": "a",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				},
				{
					"id": 63,
					"name": "combine",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "json-decoder.ts",
							"line": 978,
							"character": 18,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L978"
						}
					],
					"signatures": [
						{
							"id": 64,
							"name": "combine",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Combines multiple decoders into a single decoder that merges their results."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A decoder that combines the results of multiple decoders"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ninterface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\nconst userDecoder = JsonDecoder.combine(\n  JsonDecoder.object({name: JsonDecoder.string}, 'User'),\n  JsonDecoder.object({age: JsonDecoder.number}, 'User'),\n  JsonDecoder.object({email: JsonDecoder.string}, 'User')\n);\n\nuserDecoder.decode({name: 'John', age: 30, email: 'john@example.com'}); // Ok<User>\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "json-decoder.ts",
									"line": 978,
									"character": 18,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L978"
								}
							],
							"typeParameter": [
								{
									"id": 65,
									"name": "TS",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 66,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "json-decoder.ts",
														"line": 978,
														"character": 37,
														"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L978"
													}
												],
												"indexSignature": {
													"id": 67,
													"name": "__index",
													"variant": "signature",
													"kind": 8192,
													"flags": {},
													"sources": [
														{
															"fileName": "json-decoder.ts",
															"line": 978,
															"character": 39,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L978"
														}
													],
													"parameters": [
														{
															"id": 68,
															"name": "k",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										}
									}
								}
							],
							"parameters": [
								{
									"id": 69,
									"name": "decoders",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Array of decoders to combine"
											}
										]
									},
									"type": {
										"type": "mapped",
										"parameter": "T",
										"parameterType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										},
										"templateType": {
											"type": "reference",
											"target": 70,
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/json-decoder.ts",
															"qualifiedName": "T"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "src/json-decoder.ts",
																	"qualifiedName": "T"
																},
																"name": "T",
																"package": "ts.data.json",
																"refersToTypeParameter": true
															}
														],
														"name": "T",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": 65,
														"name": "TS",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "Decoder",
											"package": "ts.data.json",
											"qualifiedName": "JsonDecoder.Decoder"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 70,
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/json-decoder.ts",
											"qualifiedName": "Combine"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 65,
												"name": "TS",
												"package": "ts.data.json",
												"refersToTypeParameter": true
											}
										],
										"name": "Combine",
										"package": "ts.data.json"
									}
								],
								"name": "Decoder",
								"package": "ts.data.json",
								"qualifiedName": "JsonDecoder.Decoder"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						70
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						127,
						129
					]
				},
				{
					"title": "Variables",
					"children": [
						123,
						124,
						125,
						126,
						131
					]
				},
				{
					"title": "Functions",
					"children": [
						2,
						8,
						13,
						19,
						24,
						28,
						33,
						37,
						41,
						46,
						132,
						140,
						145,
						51,
						55,
						150,
						59,
						63
					]
				}
			],
			"sources": [
				{
					"fileName": "json-decoder.ts",
					"line": 42,
					"character": 17,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/json-decoder.ts#L42"
				}
			]
		},
		{
			"id": 156,
			"name": "Ok",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 157,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 2,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L2"
						}
					],
					"signatures": [
						{
							"id": 158,
							"name": "new Ok",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 2,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L2"
								}
							],
							"typeParameter": [
								{
									"id": 159,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 160,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 159,
										"name": "a",
										"package": "ts.data.json",
										"qualifiedName": "Ok.a",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 156,
								"typeArguments": [
									{
										"type": "reference",
										"target": 159,
										"name": "a",
										"package": "ts.data.json",
										"qualifiedName": "Ok.a",
										"refersToTypeParameter": true
									}
								],
								"name": "Ok",
								"package": "ts.data.json"
							}
						}
					]
				},
				{
					"id": 161,
					"name": "value",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 2,
							"character": 23,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L2"
						}
					],
					"type": {
						"type": "reference",
						"target": 159,
						"name": "a",
						"package": "ts.data.json",
						"qualifiedName": "Ok.a",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 162,
					"name": "map",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 4,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L4"
						}
					],
					"signatures": [
						{
							"id": 163,
							"name": "map",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 4,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L4"
								}
							],
							"typeParameter": [
								{
									"id": 164,
									"name": "b",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 165,
									"name": "fn",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 166,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "result.ts",
													"line": 4,
													"character": 13,
													"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L4"
												}
											],
											"signatures": [
												{
													"id": 167,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "result.ts",
															"line": 4,
															"character": 13,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L4"
														}
													],
													"parameters": [
														{
															"id": 168,
															"name": "a",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 159,
																"name": "a",
																"package": "ts.data.json",
																"qualifiedName": "Ok.a",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": 164,
														"name": "b",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 188,
								"typeArguments": [
									{
										"type": "reference",
										"target": 164,
										"name": "b",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Result",
								"package": "ts.data.json"
							}
						}
					]
				},
				{
					"id": 169,
					"name": "isOk",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 8,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L8"
						}
					],
					"signatures": [
						{
							"id": 170,
							"name": "isOk",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 8,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L8"
								}
							],
							"type": {
								"type": "predicate",
								"name": "this",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": 156,
									"typeArguments": [
										{
											"type": "reference",
											"target": 159,
											"name": "a",
											"package": "ts.data.json",
											"qualifiedName": "Ok.a",
											"refersToTypeParameter": true
										}
									],
									"name": "Ok",
									"package": "ts.data.json"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						157
					]
				},
				{
					"title": "Properties",
					"children": [
						161
					]
				},
				{
					"title": "Methods",
					"children": [
						162,
						169
					]
				}
			],
			"sources": [
				{
					"fileName": "result.ts",
					"line": 1,
					"character": 13,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L1"
				}
			],
			"typeParameters": [
				{
					"id": 171,
					"name": "a",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 172,
			"name": "Err",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 173,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "new Err",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 14,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L14"
								}
							],
							"typeParameter": [
								{
									"id": 175,
									"name": "a",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 176,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 172,
								"typeArguments": [
									{
										"type": "reference",
										"target": 175,
										"name": "a",
										"package": "ts.data.json",
										"qualifiedName": "Err.a",
										"refersToTypeParameter": true
									}
								],
								"name": "Err",
								"package": "ts.data.json"
							}
						}
					]
				},
				{
					"id": 177,
					"name": "error",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 14,
							"character": 23,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 178,
					"name": "map",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 16,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L16"
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "map",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L16"
								}
							],
							"typeParameter": [
								{
									"id": 180,
									"name": "b",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 181,
									"name": "_fn",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 182,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "result.ts",
													"line": 16,
													"character": 14,
													"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L16"
												}
											],
											"signatures": [
												{
													"id": 183,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "result.ts",
															"line": 16,
															"character": 14,
															"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L16"
														}
													],
													"parameters": [
														{
															"id": 184,
															"name": "a",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 175,
																"name": "a",
																"package": "ts.data.json",
																"qualifiedName": "Err.a",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "reference",
														"target": 180,
														"name": "b",
														"package": "ts.data.json",
														"refersToTypeParameter": true
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 188,
								"typeArguments": [
									{
										"type": "reference",
										"target": 180,
										"name": "b",
										"package": "ts.data.json",
										"refersToTypeParameter": true
									}
								],
								"name": "Result",
								"package": "ts.data.json"
							}
						}
					]
				},
				{
					"id": 185,
					"name": "isOk",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 20,
							"character": 2,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L20"
						}
					],
					"signatures": [
						{
							"id": 186,
							"name": "isOk",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "result.ts",
									"line": 20,
									"character": 2,
									"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L20"
								}
							],
							"type": {
								"type": "predicate",
								"name": "this",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": 156,
									"typeArguments": [
										{
											"type": "reference",
											"target": 175,
											"name": "a",
											"package": "ts.data.json",
											"qualifiedName": "Err.a",
											"refersToTypeParameter": true
										}
									],
									"name": "Ok",
									"package": "ts.data.json"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						173
					]
				},
				{
					"title": "Properties",
					"children": [
						177
					]
				},
				{
					"title": "Methods",
					"children": [
						178,
						185
					]
				}
			],
			"sources": [
				{
					"fileName": "result.ts",
					"line": 13,
					"character": 13,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L13"
				}
			],
			"typeParameters": [
				{
					"id": 187,
					"name": "a",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 188,
			"name": "Result",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "result.ts",
					"line": 25,
					"character": 12,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L25"
				}
			],
			"typeParameters": [
				{
					"id": 189,
					"name": "a",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": 156,
						"typeArguments": [
							{
								"type": "reference",
								"target": 189,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						],
						"name": "Ok",
						"package": "ts.data.json"
					},
					{
						"type": "reference",
						"target": 172,
						"typeArguments": [
							{
								"type": "reference",
								"target": 189,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						],
						"name": "Err",
						"package": "ts.data.json"
					}
				]
			}
		},
		{
			"id": 194,
			"name": "ok",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "result.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L27"
				}
			],
			"signatures": [
				{
					"id": 195,
					"name": "ok",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L27"
						}
					],
					"typeParameter": [
						{
							"id": 196,
							"name": "a",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 197,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 196,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 188,
						"typeArguments": [
							{
								"type": "reference",
								"target": 196,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						],
						"name": "Result",
						"package": "ts.data.json"
					}
				}
			]
		},
		{
			"id": 190,
			"name": "err",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "result.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L31"
				}
			],
			"signatures": [
				{
					"id": 191,
					"name": "err",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"sources": [
						{
							"fileName": "result.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/joanllenas/ts.data.json/blob/1f9abb84ecfff2ac73795d27c4f5404c78469f11/src/result.ts#L31"
						}
					],
					"typeParameter": [
						{
							"id": 192,
							"name": "a",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 193,
							"name": "error",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 188,
						"typeArguments": [
							{
								"type": "reference",
								"target": 192,
								"name": "a",
								"package": "ts.data.json",
								"refersToTypeParameter": true
							}
						],
						"name": "Result",
						"package": "ts.data.json"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"children": [
				1
			]
		},
		{
			"title": "Classes",
			"children": [
				156,
				172
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				154,
				188
			]
		},
		{
			"title": "Functions",
			"children": [
				194,
				190
			]
		}
	],
	"packageName": "ts.data.json",
	"packageVersion": "2.3.0-beta.1",
	"readme": [
		{
			"kind": "text",
			"text": "# ts.data.json\n\n[![Build Status](https://travis-ci.org/joanllenas/ts.data.json.svg?branch=master)](https://travis-ci.org/joanllenas/ts.data.json)\n[![npm version](https://badge.fury.io/js/ts.data.json.svg)](https://www.npmjs.com/package/ts.data.json)\n[![downloads - 33k/week](https://img.shields.io/badge/downloads-33k%2Fweek-45BE1D)](https://www.npmjs.com/package/ts.data.json)\n\nTypeScript type annotations provide compile-time guarantees. However, when data flows into our applications from external sources, many issues can arise at runtime.\n\nJSON decoders validate incoming JSON before it enters our program. This way, if the data has an unexpected structure, we're immediately alerted.\n\n> If you're new to JSON decoding, consider reading the introductory article [Decoding JSON with TypeScript](https://dev.to/joanllenas/decoding-json-with-typescript-1jjc), which explains why and how to use this library.  \n\n[![](./.github/all-your-json-are-belong-to-us.jpg)](https://en.wikipedia.org/wiki/All_your_base_are_belong_to_us)\n\n## Installation\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm install ts.data.json --save\n```"
		},
		{
			"kind": "text",
			"text": "\n\n### Quick Example\n\nYou can play with this example in [this stackblitz playground](https://stackblitz.com/edit/ts-data-json-decoder-playground?file=src%2Fmain.ts).\n\n\n#### Define your types\n\n"
		},
		{
			"kind": "code",
			"text": "```ts\ninterface Address {\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n}\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Create decoders for each type\n\n"
		},
		{
			"kind": "code",
			"text": "```ts\nconst addressDecoder = JsonDecoder.object<Address>(\n  {\n    street: JsonDecoder.string,\n    city: JsonDecoder.string,\n    country: JsonDecoder.string,\n    postalCode: JsonDecoder.string\n  },\n  'Address'\n);\n\nconst userDecoder = JsonDecoder.object(\n  {\n    id: JsonDecoder.number,\n    email: JsonDecoder.string,\n    name: JsonDecoder.string,\n    age: JsonDecoder.optional(JsonDecoder.number),\n    address: addressDecoder,\n    tags: JsonDecoder.array(JsonDecoder.string, 'string[]'),\n    isActive: JsonDecoder.boolean,\n    lastLogin: JsonDecoder.nullable(\n      JsonDecoder.string.map(str => new Date(str))\n    )\n  },\n  'User'\n);\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Infer your types\n\nYou can also infer the types from its decoders!\n\n"
		},
		{
			"kind": "code",
			"text": "```ts\ntype User = FromDecoder<typeof userDecoder>;\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Decode a valid API response\n\n"
		},
		{
			"kind": "code",
			"text": "```ts\n// Valid API response\nconst apiResponse = {\n  id: 123,\n  email: \"marty@mcfly.com\",\n  name: \"Marty McFly\",\n  age: 17,\n  address: {\n    street: \"123 Main St\",\n    city: \"San Francisco\",\n    country: \"USA\",\n    postalCode: \"94105\"\n  },\n  tags: [\"user\", \"premium\"],\n  isActive: true,\n  lastLogin: \"1985-10-26T01:21:00Z\"\n};\n\n// Decode the response\nuserDecoder\n  .decodeToPromise(apiResponse)\n  .then((user: User) => {\n    console.log(`Welcome back, ${user.name}!`);\n    console.log(`Your last login was: ${user.lastLogin?.toLocaleString()}`);\n  })\n  .catch(error => {\n    console.error('Failed to decode user data:', error);\n  });\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Output:\n\n"
		},
		{
			"kind": "code",
			"text": "```\nWelcome back, Marty McFly!\nYour last login was: 10/26/1985, 1:21:00 AM\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Decode an invalid API response\n\n"
		},
		{
			"kind": "code",
			"text": "```ts\n// Invalid API response\nconst invalidResponse = {\n  id: \"not-a-number\",  // Should be a number\n  email: \"marty@mcfly.com\",\n  name: \"Marty McFly\",\n  age: 17,\n  address: {\n    street: \"123 Main St\",\n    city: \"San Francisco\",\n    country: \"USA\",\n    postalCode: \"94105\"\n  },\n  tags: [\"user\", \"premium\"],\n  isActive: true,\n  lastLogin: \"1985-10-26T01:21:00Z\"\n};\n\n// Decode the response\nuserDecoder\n  .decodeToPromise(invalidResponse)\n  .then(user => {\n    console.log('User decoded successfully');\n  })\n  .catch(error => {\n    console.error('Validation failed:', error);\n  });\n```"
		},
		{
			"kind": "text",
			"text": "\n\n#### Output:\n\n"
		},
		{
			"kind": "code",
			"text": "```\nValidation failed: <User> decoder failed at key \"id\" with error: \"not-a-number\" is not a valid number\n```"
		},
		{
			"kind": "text",
			"text": "\n\n## Related libraries\n\n- [zod](https://github.com/colinhacks/zod)\n- [valibot](https://github.com/fabian-hiller/valibot)\n- [io-ts](https://github.com/gcanti/io-ts)\n- [yup](https://github.com/jquense/yup)\n- [ajv](https://github.com/ajv-validator/ajv)"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder"
		},
		"2": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.lazy"
		},
		"3": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.lazy"
		},
		"4": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"5": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "mkDecoder"
		},
		"6": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"7": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"8": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.enumeration"
		},
		"9": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.enumeration"
		},
		"10": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "e"
		},
		"11": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "enumObj"
		},
		"12": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"13": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.object"
		},
		"14": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.object"
		},
		"15": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"16": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"17": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"18": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "keyMap"
		},
		"19": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.objectStrict"
		},
		"20": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.objectStrict"
		},
		"21": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"22": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"23": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"24": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.fail"
		},
		"25": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.fail"
		},
		"26": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"27": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "error"
		},
		"28": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.failover"
		},
		"29": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.failover"
		},
		"30": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"31": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "defaultValue"
		},
		"32": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoder"
		},
		"33": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.optional"
		},
		"34": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.optional"
		},
		"35": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"36": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoder"
		},
		"37": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.nullable"
		},
		"38": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.nullable"
		},
		"39": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"40": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoder"
		},
		"41": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.oneOf"
		},
		"42": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.oneOf"
		},
		"43": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"44": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"45": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"46": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.allOf"
		},
		"47": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.allOf"
		},
		"48": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "T"
		},
		"49": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "R"
		},
		"50": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"51": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isNull"
		},
		"52": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isNull"
		},
		"53": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"54": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "defaultValue"
		},
		"55": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isUndefined"
		},
		"56": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isUndefined"
		},
		"57": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"58": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "defaultValue"
		},
		"59": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isExactly"
		},
		"60": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.isExactly"
		},
		"61": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"62": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "value"
		},
		"63": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.combine"
		},
		"64": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.combine"
		},
		"65": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "TS"
		},
		"66": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"67": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type.__index"
		},
		"69": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"70": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder"
		},
		"71": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.__constructor"
		},
		"72": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder"
		},
		"73": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.a"
		},
		"74": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decodeFn"
		},
		"75": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"76": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"77": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "json"
		},
		"82": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.decode"
		},
		"83": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.decode"
		},
		"84": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "json"
		},
		"85": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.~standard"
		},
		"86": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.fold"
		},
		"87": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.fold"
		},
		"88": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "b"
		},
		"89": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "onOk"
		},
		"90": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"91": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"92": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "result"
		},
		"93": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "onErr"
		},
		"94": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"95": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"96": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "error"
		},
		"97": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "json"
		},
		"98": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.decodeToPromise"
		},
		"99": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.decodeToPromise"
		},
		"100": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "json"
		},
		"101": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.map"
		},
		"102": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.map"
		},
		"103": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "b"
		},
		"104": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "fn"
		},
		"105": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"106": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"107": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "value"
		},
		"108": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.mapError"
		},
		"109": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.mapError"
		},
		"110": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "b"
		},
		"111": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "fn"
		},
		"112": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"113": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"114": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "error"
		},
		"115": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.chain"
		},
		"116": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.chain"
		},
		"117": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "b"
		},
		"118": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "fn"
		},
		"119": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"120": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"121": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "value"
		},
		"122": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.Decoder.a"
		},
		"123": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.string"
		},
		"124": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.number"
		},
		"125": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.boolean"
		},
		"126": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.emptyObject"
		},
		"127": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.DecoderObject"
		},
		"128": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"129": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.DecoderObjectKeyMap"
		},
		"130": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"131": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.succeed"
		},
		"132": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.dictionary"
		},
		"133": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.dictionary"
		},
		"134": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"135": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoder"
		},
		"136": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"137": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type"
		},
		"138": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "__type.__index"
		},
		"140": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.array"
		},
		"141": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.array"
		},
		"142": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"143": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoder"
		},
		"144": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"145": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.tuple"
		},
		"146": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.tuple"
		},
		"147": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "T"
		},
		"148": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoders"
		},
		"149": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "decoderName"
		},
		"150": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.constant"
		},
		"151": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "JsonDecoder.constant"
		},
		"152": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "a"
		},
		"153": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "value"
		},
		"154": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "FromDecoder"
		},
		"155": {
			"sourceFileName": "src/json-decoder.ts",
			"qualifiedName": "Decoder"
		},
		"156": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok"
		},
		"157": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.__constructor"
		},
		"158": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok"
		},
		"159": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.a"
		},
		"160": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "value"
		},
		"161": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.value"
		},
		"162": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.map"
		},
		"163": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.map"
		},
		"164": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "b"
		},
		"165": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "fn"
		},
		"166": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "__type"
		},
		"167": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "__type"
		},
		"168": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "a"
		},
		"169": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.isOk"
		},
		"170": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.isOk"
		},
		"171": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Ok.a"
		},
		"172": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err"
		},
		"173": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.__constructor"
		},
		"174": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err"
		},
		"175": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.a"
		},
		"176": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "error"
		},
		"177": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.error"
		},
		"178": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.map"
		},
		"179": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.map"
		},
		"180": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "b"
		},
		"181": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "_fn"
		},
		"182": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "__type"
		},
		"183": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "__type"
		},
		"184": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "a"
		},
		"185": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.isOk"
		},
		"186": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.isOk"
		},
		"187": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Err.a"
		},
		"188": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "Result"
		},
		"189": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "a"
		},
		"190": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "err"
		},
		"191": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "err"
		},
		"192": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "a"
		},
		"193": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "error"
		},
		"194": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "ok"
		},
		"195": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "ok"
		},
		"196": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "a"
		},
		"197": {
			"sourceFileName": "src/result.ts",
			"qualifiedName": "value"
		}
	}
}